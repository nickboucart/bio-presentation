	<!doctype html>  
<html lang="en">
	
	<head>
		<meta charset="utf-8">
		
		<title>Bio Nick Boucart</title>

		<meta name="description" content="Little reveal.js presentation of my bio">
		<meta name="author" content="Nick Boucart">

		<meta name="apple-mobile-web-app-capable" content="yes" />
		<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />
		
		<link href='http://fonts.googleapis.com/css?family=Lato:400,700,400italic,700italic' rel='stylesheet' type='text/css'>
		
		<link rel="stylesheet" href="/css/reveal.min.css">
		<link rel="stylesheet" href="/css/print.css" type="text/css" media="print">

		<link rel="stylesheet" href="/lib/css/zenburn.css">
		<link rel="stylesheet" href="/css/style.css">
	</head>
	
	<body>
	
		<%- body %>
	
<!-- Optional libraries for code syntax highlighting and classList support in IE9 -->
<script src="/lib/js/head.min.js"></script>

<script>
	// Load the main reveal.js script
	head.js( '/js/reveal.min.js', function() {
		// Parse the query string into a key/value object
		var query = {};

		location.search.replace( /[A-Z0-9]+?=(\w*)/gi, function(a) {
			query[ a.split( '=' ).shift() ] = a.split( '=' ).pop();
		} );

		// Fires when a slide with data-state=customevent is activated
		Reveal.addEventListener( 'customevent', function() {
			console.log( '"customevent" has fired' );
		} );

		// Fires each time a new slide is activated
		Reveal.addEventListener( 'slidechanged', function( event ) {
			// event.previousSlide, event.currentSlide, event.indexh, event.indexv
		} );

		Reveal.initialize({
			// Display controls in the bottom right corner
			controls: true,

			// Display a presentation progress bar
			progress: true,

			// If true; each slide will be pushed to the browser history
			history: true,

			// Loops the presentation, defaults to false
			loop: false,

			// Flags if mouse wheel navigation should be enabled
			mouseWheel: true,

			// Apply a 3D roll to links on hover
			rollingLinks: false,

			// UI style
			theme: 'default', 

			// Transition style
			transition: query.transition || 'default' // default/cube/page/concave/linear(2d)
		});
	} );
	
	// Load third party scripts
	head.js( '/lib/js/classList.js' );
	head.js( '/lib/js/highlight.js', function() {
		// Fire off syntax highlighting for potential code samples in the slides
		hljs.initHighlightingOnLoad();
	} );


	// presentation id
	var presentation_id = 'demo' ; // default to demo presentation
			
	// map the url to the presentation id
	var pathNameArr = window.location.pathname.split("/");
	if(pathNameArr.length > 1)
		presentation_id = pathNameArr[1];

	head.js( '/socket.io/socket.io.js' , function() {
		
		// connect
		var socket = io.connect('/');	
		
		socket.on('connect', function () {
			console.log("client connected. Sending cur slide request");
			
	
			// on connect send presentation request
			socket.emit('request_presentation', {'id': presentation_id} );
		
			// init data
			socket.on('initdata', function(data) {
				console.log("Init data: " + JSON.stringify(data) );
				if(data.id == presentation_id)
				{
					// go to the respective slide
					Reveal.navigateTo(data.indexh, data.indexv);
				}
			});
			
			socket.on('updatedata', function(data) {
				console.log("Receive update data: " + JSON.stringify(data) );
				
				if(data.id == presentation_id)
				{
					// go to the respective slide
					Reveal.navigateTo(data.indexh, data.indexv);
				}
			});
			
		
		});
		
	} );
	function resizer(id)
{

var doc=document.getElementById(id).contentWindow.document;
var body_ = doc.body, html_ = doc.documentElement;

var height = Math.max( body_.scrollHeight, body_.offsetHeight, html_.clientHeight, html_.scrollHeight, html_.offsetHeight );
var width  = Math.max( body_.scrollWidth, body_.offsetWidth, html_.clientWidth, html_.scrollWidth, html_.offsetWidth );

document.getElementById(id).style.height=height;
document.getElementById(id).style.width=width;

}
	
</script>
	
	
	</body>
</html>

